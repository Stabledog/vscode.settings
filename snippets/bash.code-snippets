{
    // Helper: use vscode-make-snippet.sh to format code for
    //   the snippet json rules.
    //
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"newScript": {
        "description": "Common basic elements of a new script: die(), main(), etc.",
		"prefix": ["bashScript"],
		"body": [
			"#!/bin/bash",
            "# ${TM_FILENAME}",
            "",
            "scriptName=\"$(canonpath \"\\$0\")\"",
            "scriptDir=$(command dirname -- \"\\${scriptName}\")",
            "",
            "die() {",
            "    builtin echo \"ERROR(\\$(basename \\${scriptName}): \\$*\" >&2",
			"    builtin exit 1",
			"}",
            "",
            "stub() {",
            "   builtin echo \"  <<< STUB[\\$*] >>> \" >&2",
            "}",
            "main() {",
            "    builtin echo \"args:[\\$*]\" ",
            "}",
            "",
            "[[ -z \\${sourceMe} ]] && {",
            "    main \"\\$@\" ",
            "    exit",
            "}",
            "true",
            ""
		]
	},

    "makeCanonpath": {
        "description": "Create canonpath() definition",
        "prefix": ["canonpath"],
        "body": [
            "canonpath() {",
            "    type -t realpath.sh &>/dev/null && {",
            "        realpath.sh -f \"\\$@\"",
            "        return",
            "    }",
            "    type -t readlink &>/dev/null && {",
            "        readlink -f \"\\$@\"",
            "        return",
            "    }",
            "    # Fallback: Ok for rough work only, does not handle some corner cases:",
            "    ( cd -L -- \"\\$(dirname -- \\$0)\"; echo \"\\$(pwd -P)/\\$(basename -- \\$0)\" )",
            "}",
        ]
    },
}
